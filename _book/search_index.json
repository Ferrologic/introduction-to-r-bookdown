[
["index.html", "Introduction to R Chapter 1 Prerequisites", " Introduction to R Filip Wästberg 2019-08-23 Chapter 1 Prerequisites During the workshops you will use R on both a cloud platform and on your own computer. If you have a previous R version installed on your computer we recommend that you update both R and RStudio. This book is written in R with the package bookdown built by Yihui Xie. You can find out more about bookdown here "],
["introduction-to-r.html", "Chapter 2 Introduction to R", " Chapter 2 Introduction to R This is a document with information from the Slides in the introduction to R workshop held at Tele2 during autumn 2019. "],
["module-1-introduction-to-r.html", "Chapter 3 Module 1 - introduction to R 3.1 Missing values 3.2 R is a functional programming languange 3.3 Functions 3.4 Documentation 3.5 Excercices 3.6 data.frame 3.7 Packages 3.8 Excercise 3.9 tidyverse and friends 3.10 When saving files 3.11 Avoid long expressions", " Chapter 3 Module 1 - introduction to R In it’s simplest form R can be used as a calculator with +, -, / or *. 100 + 4 ## [1] 104 Or 4 * 6 - 2 ## [1] 22 Create objects with &lt;-, which is called the assign operator. x &lt;- 100 + 4 x ## [1] 104 The assign operater &lt;- can be reversed -&gt; 100 + 4 -&gt; x x ## [1] 104 You can combine values, or objects in a new object with the function c() (c for combine). When objects are combined they are called a vector. x &lt;- c(4, 100 + 4, 10 * 2) x ## [1] 4 104 20 Objects and vectors are not restrained to numerical values, you can use text in them as well. text &lt;- c(&quot;hej&quot;, &quot;jag&quot;, &quot;älskar&quot;, &quot;r&quot;) text ## [1] &quot;hej&quot; &quot;jag&quot; &quot;älskar&quot; &quot;r&quot; However, you cannot mix numerical and text values. blandat &lt;- c(1, 5, &quot;hej&quot;, 6) blandat ## [1] &quot;1&quot; &quot;5&quot; &quot;hej&quot; &quot;6&quot; 3.1 Missing values NA is not zero. It is not a value. x &lt;- c(4, NA, 2, 50) If check which values that are larger than two: x &gt; 2 ## [1] TRUE NA FALSE TRUE Let’s filter out all the NA’s: x == NA ## [1] NA NA NA NA Confusing? fredriks_age &lt;- NA markus_age &lt;- NA fredriks_age == markus_age ## [1] NA If we want to find an NA or filter out NAs we us is.na() instead. is.na(x) ## [1] FALSE TRUE FALSE FALSE na.rm is a common argument in functions. mean(x) ## [1] NA We use na.rm = TRUE mean(x, na.rm = TRUE) ## [1] 18.66667 3.2 R is a functional programming languange Functions reside in packages Functional programming is great for Data Science 3.3 Functions Just like in Excel mean() median() sd() …and so on And mathematical log() sin() cos() …osv 3.4 Documentation To access documentation about functions, i.e. how they work, you just add a question mark in front of the function that you are interested in. ?mean() 3.5 Excercices Use some of R’s statistical functions on a numerical vector 3.6 data.frame data.frames are a common format when doing data science in R. A data.frame is a rectangular table with one or more columns. ## # A tibble: 6 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 542 540 2 923 ## 4 2013 1 1 544 545 -1 1004 ## 5 2013 1 1 554 600 -6 812 ## 6 2013 1 1 554 558 -4 740 ## # … with 12 more variables: sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, ## # carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, ## # air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; We can create our own data frames in R. data.frame(random_number = rnorm(5)) ## random_number ## 1 0.01997568 ## 2 1.16757728 ## 3 -0.83829748 ## 4 -0.10742416 ## 5 -0.52644831 If you have two vectors of the same lenght you can combine them to a data.frame. siffror &lt;- c(5,1,2,5) ord &lt;- c(&quot;vad&quot;, &quot;var&quot;, &quot;det&quot;, &quot;där&quot;) data.frame(siffror, ord) ## siffror ord ## 1 5 vad ## 2 1 var ## 3 2 det ## 4 5 där 3.7 Packages To install a package from CRAN you use the function install.packages(&quot;package&quot;). After downloading a package your need to load it with library(package). 3.8 Excercise The package tidyverse is downloaded for you. Load it with library(). 3.9 tidyverse and friends tidyverse is a collection of packages for common tasks in data analysis. They share a common philosophy Easy to use We will focus on tidyverse 3.9.1 Workflow in R Use projects Never save your workspace 3.9.2 Writing code in R Follow the tidyverse styleguide Name objects, functions and data.frames with small letters and *_* between words. min_egna_funktion &lt;- function(x) In contrast to: MinEgnaFunktion &lt;- function(x) You are writing text for someone to read it Use space between , GOOD: mean(x, na.rm = TRUE) BAD: mean(x,na.rm=TRUE) 3.10 When saving files When saving files we try to follow this principle, so when you name a file name it min_r_fil.R instead of min R fil.R. 3.11 Avoid long expressions This is harder to read: iris %&gt;% group_by(Species) %&gt;% summarise(Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width), Species = n_distinct(Species)) Than this: iris %&gt;% group_by(Species) %&gt;% summarise( Sepal.Length = mean(Sepal.Length), Sepal.Width = mean(Sepal.Width), Species = n_distinct(Species) ) 3.11.1 Rmarkdown A notebook format in R Great for creating reports Great for exploratory analysis Open up intro-to-r.Rmd "],
["data-manipulation-with-dplyr.html", "Chapter 4 Data manipulation with dplyr 4.1 Excercise 4.2 filter() 4.3 We also have operators for checking if something is TRUE 4.4 Regex 4.5 Excercise 2 4.6 arrange() 4.7 select() 4.8 rename() 4.9 Excercise 4 4.10 mutate() 4.11 Excercise 5 4.12 Dates 4.13 Excercise 6 4.14 summarise() 4.15 Excercise 7 4.16 Excercise 8 4.17 Joins 4.18 Joins som venn 4.19 Excercise 9 4.20 Tidy data 4.21 Untidy data 4.22 Excercise 10", " Chapter 4 Data manipulation with dplyr dplyr is a package that makes data manipulation easy. It consists of five main verbs: filter() arrange() select() mutate() summarise() Other useful functions such as glimpse() library(tidyverse) library(nycflights13) glimpse(flights) ## Observations: 336,776 ## Variables: 19 ## $ year &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2… ## $ month &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ day &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ dep_time &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558,… ## $ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600,… ## $ dep_delay &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, … ## $ arr_time &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753… ## $ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745… ## $ arr_delay &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3,… ## $ carrier &lt;chr&gt; &quot;UA&quot;, &quot;UA&quot;, &quot;AA&quot;, &quot;B6&quot;, &quot;DL&quot;, &quot;UA&quot;, &quot;B6&quot;, &quot;EV&quot;, &quot;… ## $ flight &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, … ## $ tailnum &lt;chr&gt; &quot;N14228&quot;, &quot;N24211&quot;, &quot;N619AA&quot;, &quot;N804JB&quot;, &quot;N668DN&quot;,… ## $ origin &lt;chr&gt; &quot;EWR&quot;, &quot;LGA&quot;, &quot;JFK&quot;, &quot;JFK&quot;, &quot;LGA&quot;, &quot;EWR&quot;, &quot;EWR&quot;, … ## $ dest &lt;chr&gt; &quot;IAH&quot;, &quot;IAH&quot;, &quot;MIA&quot;, &quot;BQN&quot;, &quot;ATL&quot;, &quot;ORD&quot;, &quot;FLL&quot;, … ## $ air_time &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, … ## $ distance &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944,… ## $ hour &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6… ## $ minute &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0,… ## $ time_hour &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-0… 4.1 Excercise Import the customer data into R using read_csv(&quot;path&quot;), save it to a data.frame Use glimpse() on it 4.2 filter() filter() is a function that let’s you filter out rows that meet certain conditions. filter(flights, month == 2) ## # A tibble: 24,951 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 2 1 456 500 -4 652 ## 2 2013 2 1 520 525 -5 816 ## 3 2013 2 1 527 530 -3 837 ## 4 2013 2 1 532 540 -8 1007 ## 5 2013 2 1 540 540 0 859 ## 6 2013 2 1 552 600 -8 714 ## 7 2013 2 1 552 600 -8 919 ## 8 2013 2 1 552 600 -8 655 ## 9 2013 2 1 553 600 -7 833 ## 10 2013 2 1 553 600 -7 821 ## # … with 24,941 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; We can also use text: filter(flights, origin == &quot;JFK&quot;) ## # A tibble: 111,279 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 542 540 2 923 ## 2 2013 1 1 544 545 -1 1004 ## 3 2013 1 1 557 600 -3 838 ## 4 2013 1 1 558 600 -2 849 ## 5 2013 1 1 558 600 -2 853 ## 6 2013 1 1 558 600 -2 924 ## 7 2013 1 1 559 559 0 702 ## 8 2013 1 1 606 610 -4 837 ## 9 2013 1 1 611 600 11 945 ## 10 2013 1 1 613 610 3 925 ## # … with 111,269 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; And combine them: filter(flights, origin == &quot;JFK&quot; &amp; month == 2) ## # A tibble: 8,421 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 2 1 532 540 -8 1007 ## 2 2013 2 1 540 540 0 859 ## 3 2013 2 1 552 600 -8 714 ## 4 2013 2 1 554 601 -7 920 ## 5 2013 2 1 555 600 -5 903 ## 6 2013 2 1 558 600 -2 916 ## 7 2013 2 1 559 600 -1 923 ## 8 2013 2 1 602 600 2 655 ## 9 2013 2 1 609 610 -1 902 ## 10 2013 2 1 610 615 -5 905 ## # … with 8,411 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; We can also filter out every row that meets a condition in a vector, for instance: filter(flights, origin %in% c(&quot;JFK&quot;, &quot;LGA&quot;)) ## # A tibble: 215,941 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 533 529 4 850 ## 2 2013 1 1 542 540 2 923 ## 3 2013 1 1 544 545 -1 1004 ## 4 2013 1 1 554 600 -6 812 ## 5 2013 1 1 557 600 -3 709 ## 6 2013 1 1 557 600 -3 838 ## 7 2013 1 1 558 600 -2 753 ## 8 2013 1 1 558 600 -2 849 ## 9 2013 1 1 558 600 -2 853 ## 10 2013 1 1 558 600 -2 924 ## # … with 215,931 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; 4.2.1 Operators In R, as in any programming languange, there are a number of logical and relational operators. In R these are: ## # A tibble: 3 x 2 ## `Relation operators` `Symbol in R` ## &lt;chr&gt; &lt;chr&gt; ## 1 &quot;och (and) &quot; &amp; ## 2 eller(or) | ## 3 icke(not) ! ## # A tibble: 7 x 2 ## `Logical Operators` `Symbol in R` ## &lt;chr&gt; &lt;chr&gt; ## 1 equal == ## 2 not equal != ## 3 larger than or equal &gt;= ## 4 smaller than or equal &lt;= ## 5 larger than &gt; ## 6 smaller than &lt; ## 7 is in %in% 4.3 We also have operators for checking if something is TRUE Instead of writing x == TRUE you should write isTRUE(x) and !isTRUE(x) if you want to check if something is FALSE. 4.3.1 Use filter to find… How many customers had a data-volume over 1000 in february 2019? How many customers have been members longer than 2005 How many customers have a data-volume over 2000 in february and have a calculated revenue larger than 500 per month? How many customers have a subscription with “Rörlig pris”? Are there any customers that are missing an ID? I.e. is NA. 4.3.2 stringr When workingfilter() it is common that we want to filter out certains parts of a string stringr is a great package for manipulating strings in R Usually it’s functions starts with str_..., such as str_detect(). Here are some useful functions: library(stringr) frukt &lt;- c(&quot;apple&quot;, &quot;orange&quot;, &quot;banana&quot;) str_detect(frukt, &quot;b&quot;) ## [1] FALSE FALSE TRUE Or str_replace() str_replace(frukt, &quot;a&quot;, &quot;ä&quot;) ## [1] &quot;äpple&quot; &quot;oränge&quot; &quot;bänana&quot; Or str_remove() str_remove(frukt, &quot;a&quot;) ## [1] &quot;pple&quot; &quot;ornge&quot; &quot;bnana&quot; 4.3.3 stringr in filter() We can use stringr in filter(): filter(flights, str_detect(carrier, &quot;U&quot;)) ## # A tibble: 79,201 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 554 558 -4 740 ## 4 2013 1 1 558 600 -2 924 ## 5 2013 1 1 558 600 -2 923 ## 6 2013 1 1 559 600 -1 854 ## 7 2013 1 1 607 607 0 858 ## 8 2013 1 1 611 600 11 945 ## 9 2013 1 1 622 630 -8 1017 ## 10 2013 1 1 623 627 -4 933 ## # … with 79,191 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; 4.4 Regex Specific string manipulation For example: frukt ## [1] &quot;apple&quot; &quot;orange&quot; &quot;banana&quot; str_detect(frukt, &quot;^b&quot;) ## [1] FALSE FALSE TRUE and frukt ## [1] &quot;apple&quot; &quot;orange&quot; &quot;banana&quot; str_detect(frukt, &quot;e$&quot;) ## [1] TRUE TRUE FALSE 4.5 Excercise 2 How many customers have a subscription with “Fast pris”? How many customers have a subscription that is not “Bredband”? 4.6 arrange() arrange() is a verb for sorting data.frames. arrange(flights, dep_delay) ## # A tibble: 336,776 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 12 7 2040 2123 -43 40 ## 2 2013 2 3 2022 2055 -33 2240 ## 3 2013 11 10 1408 1440 -32 1549 ## 4 2013 1 11 1900 1930 -30 2233 ## 5 2013 1 29 1703 1730 -27 1947 ## 6 2013 8 9 729 755 -26 1002 ## 7 2013 10 23 1907 1932 -25 2143 ## 8 2013 3 30 2030 2055 -25 2213 ## 9 2013 3 2 1431 1455 -24 1601 ## 10 2013 5 5 934 958 -24 1225 ## # … with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; If you instead want to sort in descending order you can write like this: arrange(flights, desc(dep_delay)) ## # A tibble: 336,776 x 19 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 9 641 900 1301 1242 ## 2 2013 6 15 1432 1935 1137 1607 ## 3 2013 1 10 1121 1635 1126 1239 ## 4 2013 9 20 1139 1845 1014 1457 ## 5 2013 7 22 845 1600 1005 1044 ## 6 2013 4 10 1100 1900 960 1342 ## 7 2013 3 17 2321 810 911 135 ## 8 2013 6 27 959 1900 899 1236 ## 9 2013 7 22 2257 759 898 121 ## 10 2013 12 5 756 1700 896 1058 ## # … with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; 4.6.0.1 Excercise 3 Which customer has been “active” longest? What is the date? Which customer is most newly active? 4.7 select() select() is a verb for selecting columns in a data.frame. You can choose columns by their name: select(flights, year, month, day, origin) ## # A tibble: 336,776 x 4 ## year month day origin ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; ## 1 2013 1 1 EWR ## 2 2013 1 1 LGA ## 3 2013 1 1 JFK ## 4 2013 1 1 JFK ## 5 2013 1 1 LGA ## 6 2013 1 1 EWR ## 7 2013 1 1 EWR ## 8 2013 1 1 LGA ## 9 2013 1 1 JFK ## 10 2013 1 1 LGA ## # … with 336,766 more rows You can also choose columns based on their numerical order select(flights, 1:5) ## # A tibble: 336,776 x 5 ## year month day dep_time sched_dep_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; ## 1 2013 1 1 517 515 ## 2 2013 1 1 533 529 ## 3 2013 1 1 542 540 ## 4 2013 1 1 544 545 ## 5 2013 1 1 554 600 ## 6 2013 1 1 554 558 ## 7 2013 1 1 555 600 ## 8 2013 1 1 557 600 ## 9 2013 1 1 557 600 ## 10 2013 1 1 558 600 ## # … with 336,766 more rows You can select all the columns from column_a to column_d with: : select(flights, year:origin) ## # A tibble: 336,776 x 13 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 542 540 2 923 ## 4 2013 1 1 544 545 -1 1004 ## 5 2013 1 1 554 600 -6 812 ## 6 2013 1 1 554 558 -4 740 ## 7 2013 1 1 555 600 -5 913 ## 8 2013 1 1 557 600 -3 709 ## 9 2013 1 1 557 600 -3 838 ## 10 2013 1 1 558 600 -2 753 ## # … with 336,766 more rows, and 6 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt; 4.7.1 Help functions When you do data science you often want to move columns for different reasons. Not seldom you want to put one column first and the rest after. For this you can use the help function everything(): select(flights, origin, everything()) ## # A tibble: 336,776 x 19 ## origin year month day dep_time sched_dep_time dep_delay arr_time ## &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 EWR 2013 1 1 517 515 2 830 ## 2 LGA 2013 1 1 533 529 4 850 ## 3 JFK 2013 1 1 542 540 2 923 ## 4 JFK 2013 1 1 544 545 -1 1004 ## 5 LGA 2013 1 1 554 600 -6 812 ## 6 EWR 2013 1 1 554 558 -4 740 ## 7 EWR 2013 1 1 555 600 -5 913 ## 8 LGA 2013 1 1 557 600 -3 709 ## 9 JFK 2013 1 1 557 600 -3 838 ## 10 LGA 2013 1 1 558 600 -2 753 ## # … with 336,766 more rows, and 11 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, ## # time_hour &lt;dttm&gt; Apart from eveything() there are a number of other help functions: starts_with(“asd”) ends_with(“air”) contains(“flyg”) matches(“asd”) num_range(“flyg”, 1:10) matches flyg1, flyg2 … flyg10 You can use these in the same way as everything(). select(flights, origin, starts_with(&quot;m&quot;)) ## # A tibble: 336,776 x 3 ## origin month minute ## &lt;chr&gt; &lt;int&gt; &lt;dbl&gt; ## 1 EWR 1 15 ## 2 LGA 1 29 ## 3 JFK 1 40 ## 4 JFK 1 45 ## 5 LGA 1 0 ## 6 EWR 1 58 ## 7 EWR 1 0 ## 8 LGA 1 0 ## 9 JFK 1 0 ## 10 LGA 1 0 ## # … with 336,766 more rows 4.8 rename() To rename a variable you use rename(data, new_variable = old_variable) rename(flights, år = year) ## # A tibble: 336,776 x 19 ## år month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 542 540 2 923 ## 4 2013 1 1 544 545 -1 1004 ## 5 2013 1 1 554 600 -6 812 ## 6 2013 1 1 554 558 -4 740 ## 7 2013 1 1 555 600 -5 913 ## 8 2013 1 1 557 600 -3 709 ## 9 2013 1 1 557 600 -3 838 ## 10 2013 1 1 558 600 -2 753 ## # … with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt; 4.9 Excercise 4 Choose all columns that contain ”nm&quot; Choose the column for customer ID and all columns that starts with ”tr_tot&quot; Rename ”pc_priceplan_nm&quot; to ”price_plan&quot; 4.10 mutate() mutate() is a verb for manipulating and creating new columns Below we create a new column with the mean of departure delay. mutate(flights, mean_dep_delay = mean(dep_delay)) ## # A tibble: 336,776 x 20 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 542 540 2 923 ## 4 2013 1 1 544 545 -1 1004 ## 5 2013 1 1 554 600 -6 812 ## 6 2013 1 1 554 558 -4 740 ## 7 2013 1 1 555 600 -5 913 ## 8 2013 1 1 557 600 -3 709 ## 9 2013 1 1 557 600 -3 838 ## 10 2013 1 1 558 600 -2 753 ## # … with 336,766 more rows, and 13 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, mean_dep_delay &lt;dbl&gt; You can also use with simple mathematical operators mutate(): mutate(flights, beer_time = dep_delay - arr_delay) ## # A tibble: 336,776 x 20 ## year month day dep_time sched_dep_time dep_delay arr_time ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; ## 1 2013 1 1 517 515 2 830 ## 2 2013 1 1 533 529 4 850 ## 3 2013 1 1 542 540 2 923 ## 4 2013 1 1 544 545 -1 1004 ## 5 2013 1 1 554 600 -6 812 ## 6 2013 1 1 554 558 -4 740 ## 7 2013 1 1 555 600 -5 913 ## 8 2013 1 1 557 600 -3 709 ## 9 2013 1 1 557 600 -3 838 ## 10 2013 1 1 558 600 -2 753 ## # … with 336,766 more rows, and 13 more variables: sched_arr_time &lt;int&gt;, ## # arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;, ## # origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;, ## # minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, beer_time &lt;dbl&gt; There is a variant of mutate mutate() calledtransmute() that will return only the column that you have maniuplated. transmute(flights, beer_time = dep_delay - arr_delay) ## # A tibble: 336,776 x 1 ## beer_time ## &lt;dbl&gt; ## 1 -9 ## 2 -16 ## 3 -31 ## 4 17 ## 5 19 ## 6 -16 ## 7 -24 ## 8 11 ## 9 5 ## 10 -10 ## # … with 336,766 more rows In combination with mutate() you can use a variety of functions, some example of useful functions inside mutate is: rank(), min_rank(), dense_rank(), percent_rank() to rank log(), log10() to take the log of a variable cumsum(), cummean() for cummulative stats row_number() if you need to create rownumbers lead() and lag() For example we can lag departure delay and save it in a new variable. transmute(flights, lag_dep_delay = lag(dep_delay)) ## # A tibble: 336,776 x 1 ## lag_dep_delay ## &lt;dbl&gt; ## 1 NA ## 2 2 ## 3 4 ## 4 2 ## 5 -1 ## 6 -6 ## 7 -4 ## 8 -5 ## 9 -3 ## 10 -3 ## # … with 336,766 more rows 4.10.1 if_else() A common task in Excel or any other programming languange is to compose if else-statements. The best way to do this in R is with the function if_else() transmute(flights, försenad = if_else(dep_delay &gt; 5, true = &quot;försenad&quot;, false = &quot;ej försenad&quot;)) ## # A tibble: 336,776 x 1 ## försenad ## &lt;chr&gt; ## 1 ej försenad ## 2 ej försenad ## 3 ej försenad ## 4 ej försenad ## 5 ej försenad ## 6 ej försenad ## 7 ej försenad ## 8 ej försenad ## 9 ej försenad ## 10 ej försenad ## # … with 336,766 more rows If you want to make multiple if else-statements, instead of making multiple if else-statements you can use the case_when() function: transmute(flights, försenad_kat = case_when( dep_delay + arr_delay &gt; 80 ~ &quot;mycket_försenad&quot;, dep_delay + arr_delay &gt; 0 ~ &quot;ganska_försenad&quot;, dep_delay + arr_delay &lt;= 0 ~ &quot;ej_försenad&quot;, TRUE ~ &quot;okänd&quot;)) ## # A tibble: 336,776 x 1 ## försenad_kat ## &lt;chr&gt; ## 1 ganska_försenad ## 2 ganska_försenad ## 3 ganska_försenad ## 4 ej_försenad ## 5 ej_försenad ## 6 ganska_försenad ## 7 ganska_försenad ## 8 ej_försenad ## 9 ej_försenad ## 10 ganska_försenad ## # … with 336,766 more rows 4.11 Excercise 5 Create a new variable that is the mean of the last 3 months of data consumption Create a variable that takes the logarithm of your previously created column Create a new variable that indicates if the priceplan is “Bredband” or not. Create a new variable that groups priceplan in “Fast pris”, “Rörligt pris”, “Bredband” and “Annan” for everything that is not in any of the previous. 4.12 Dates Dates a information about time that we commonly use in analytics. The easiest way to manipulate dates in R is with the package lubridate. In order to get todays date you can use the function Sys.Date()(that is built into R). Sys.Date() ## [1] &quot;2019-08-23&quot; Say that you want to find the month, week or year of a date. The package lubridate contains useful functions for this, such as year(), month() and week. library(lubridate) ## ## Attaching package: &#39;lubridate&#39; ## The following object is masked from &#39;package:base&#39;: ## ## date week(Sys.Date()) ## [1] 34 In general you should define your date before passing it to a lubridate-function. In other words, you can’t just use a string (even though that sometimes work). days_in_month(&quot;2019-03-15&quot;) ## Error in leap_year(x): unrecognized date format You can define you with with as.Date(), where you also can specify the format of the date. as.Date(&quot;2018-03-15&quot;, format = &quot;%Y-%m-%d&quot;) ## [1] &quot;2018-03-15&quot; This is especially useful if your date is written in a non-standard way. as.Date(&quot;03/18/15&quot;, format = &quot;%m/%y/%d&quot;) ## [1] &quot;2018-03-15&quot; Other functions that are useful in lubridate are days_in_month: days_in_month(as.Date(&quot;2018-03-15&quot;)) ## Mar ## 31 And floor_date() if you, for example, want to find the first date in a month or a week,. floor_date(as.Date(&quot;2018-03-15&quot;), unit = &quot;month&quot;) ## [1] &quot;2018-03-01&quot; 4.13 Excercise 6 Create a varible for month lubridate::month(x) of customer activation Create a new varibale for year of customer activation Create a new variable with the number of days in the month of activation 4.14 summarise() summarise() is a verb for summarizing data (you can also spell i summarize()). summarise(flights, mean_dist = mean(distance, na.rm = T), median_dist = median(distance, na.rm = T), sum_dist = sum(distance, na.rm = T) ) ## # A tibble: 1 x 3 ## mean_dist median_dist sum_dist ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1040. 872 350217607 4.14.1 group_by() Below we create a new grouped data set grouped on carrier och dest. carrier_dest_flights &lt;- group_by(flights, carrier, dest) Every summarisation or mutation done on this new data-set will be done group wise. summarise(carrier_dest_flights, mean_dep_delay = mean(dep_delay, na.rm = T)) ## # A tibble: 314 x 3 ## # Groups: carrier [16] ## carrier dest mean_dep_delay ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 9E ATL 0.965 ## 2 9E AUS 19 ## 3 9E AVL -2.6 ## 4 9E BGR 34 ## 5 9E BNA 19.1 ## 6 9E BOS 14.8 ## 7 9E BTV -4.5 ## 8 9E BUF 15.5 ## 9 9E BWI 17.5 ## 10 9E CAE -3.67 ## # … with 304 more rows 4.15 Excercise 7 What is the sum data volume during the last month? What’s the mean and median and what are the max and min values? You can use max() and min() to calculate maximum and minimum-values. 4.15.1 More expressions You can combine dplyr-verbs summarise(group_by(flights, carrier), mean_dep_delay = mean(dep_delay, na.rm = T)) ## # A tibble: 16 x 2 ## carrier mean_dep_delay ## &lt;chr&gt; &lt;dbl&gt; ## 1 9E 16.7 ## 2 AA 8.59 ## 3 AS 5.80 ## 4 B6 13.0 ## 5 DL 9.26 ## 6 EV 20.0 ## 7 F9 20.2 ## 8 FL 18.7 ## 9 HA 4.90 ## 10 MQ 10.6 ## 11 OO 12.6 ## 12 UA 12.1 ## 13 US 3.78 ## 14 VX 12.9 ## 15 WN 17.7 ## 16 YV 19.0 However, the more verbs you combine the harder it will be to read: summarise( group_by( filter(flights, dep_delay &lt; 60), carrier), mean_dep_delay = mean(dep_delay, na.rm = T), n_flights = n()) ## # A tibble: 16 x 3 ## carrier mean_dep_delay n_flights ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 9E 2.96 15425 ## 2 AA 0.890 30059 ## 3 AS -0.719 673 ## 4 B6 3.26 49514 ## 5 DL 1.76 45062 ## 6 EV 4.65 44372 ## 7 F9 5.09 607 ## 8 FL 4.72 2864 ## 9 HA -2.47 331 ## 10 MQ 1.48 23126 ## 11 OO -2.88 25 ## 12 UA 4.33 54080 ## 13 US -0.744 19094 ## 14 VX 2.70 4766 ## 15 WN 6.60 10999 ## 16 YV 2.25 465 4.15.1.1 %&gt;% “the pipe” %&gt;% from the magrittr-package. %&gt;% is called “the pipe” and is pronounced “and then”. flights %&gt;% filter(dep_delay &lt; 60) %&gt;% group_by(carrier) %&gt;% summarise( mean_dep_delay = mean(dep_delay, na.rm = T), n_flights = n() ) ## # A tibble: 16 x 3 ## carrier mean_dep_delay n_flights ## &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; ## 1 9E 2.96 15425 ## 2 AA 0.890 30059 ## 3 AS -0.719 673 ## 4 B6 3.26 49514 ## 5 DL 1.76 45062 ## 6 EV 4.65 44372 ## 7 F9 5.09 607 ## 8 FL 4.72 2864 ## 9 HA -2.47 331 ## 10 MQ 1.48 23126 ## 11 OO -2.88 25 ## 12 UA 4.33 54080 ## 13 US -0.744 19094 ## 14 VX 2.70 4766 ## 15 WN 6.60 10999 ## 16 YV 2.25 465 4.16 Excercise 8 Use %&gt;% and answer the following questions: Which CPE type is most common? Which priceplan has the highest mean data volume (for febraury 2019)? Calculate the mean of data volume for the year that the customer was created. Which year has the highest mean? 4.17 Joins To join data frames is an essential part of data manipulation, to do that we use dplyr’s different join functions: left_join() right_join() full_join() inner_join() semi_join() anti_join() 4.18 Joins som venn flights %&gt;% select(year:day, hour, origin, dest, tailnum, carrier) %&gt;% left_join(airlines, by = c(&quot;carrier&quot; = &quot;carrier&quot;)) ## # A tibble: 336,776 x 9 ## year month day hour origin dest tailnum carrier name ## &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2013 1 1 5 EWR IAH N14228 UA United Air Lines I… ## 2 2013 1 1 5 LGA IAH N24211 UA United Air Lines I… ## 3 2013 1 1 5 JFK MIA N619AA AA American Airlines … ## 4 2013 1 1 5 JFK BQN N804JB B6 JetBlue Airways ## 5 2013 1 1 6 LGA ATL N668DN DL Delta Air Lines In… ## 6 2013 1 1 5 EWR ORD N39463 UA United Air Lines I… ## 7 2013 1 1 6 EWR FLL N516JB B6 JetBlue Airways ## 8 2013 1 1 6 LGA IAD N829AS EV ExpressJet Airline… ## 9 2013 1 1 6 JFK MCO N593JB B6 JetBlue Airways ## 10 2013 1 1 6 LGA ORD N3ALAA AA American Airlines … ## # … with 336,766 more rows 4.19 Excercise 9 Left join your data with tele2-kunder-transaktioner.csv on custid. 4.20 Tidy data tidy data is when every observation is a row and every variable is a column. library(gapminder) gapminder ## # A tibble: 1,704 x 6 ## country continent year lifeExp pop gdpPercap ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 Afghanistan Asia 1952 28.8 8425333 779. ## 2 Afghanistan Asia 1957 30.3 9240934 821. ## 3 Afghanistan Asia 1962 32.0 10267083 853. ## 4 Afghanistan Asia 1967 34.0 11537966 836. ## 5 Afghanistan Asia 1972 36.1 13079460 740. ## 6 Afghanistan Asia 1977 38.4 14880372 786. ## 7 Afghanistan Asia 1982 39.9 12881816 978. ## 8 Afghanistan Asia 1987 40.8 13867957 852. ## 9 Afghanistan Asia 1992 41.7 16317921 649. ## 10 Afghanistan Asia 1997 41.8 22227415 635. ## # … with 1,694 more rows 4.21 Untidy data library(readxl) gapminder_untidy &lt;- read_excel(&quot;data/life_expectancy_at_birth.xlsx&quot;) gapminder_untidy ## # A tibble: 260 x 218 ## `Life expectanc… `1800` `1801` `1802` `1803` `1804` `1805` `1806` `1807` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Abkhazia NA NA NA NA NA NA NA NA ## 2 Afghanistan 28.2 28.2 28.2 28.2 28.2 28.2 28.2 28.1 ## 3 Akrotiri and Dh… NA NA NA NA NA NA NA NA ## 4 Albania 35.4 35.4 35.4 35.4 35.4 35.4 35.4 35.4 ## 5 Algeria 28.8 28.8 28.8 28.8 28.8 28.8 28.8 28.8 ## 6 American Samoa NA NA NA NA NA NA NA NA ## 7 Andorra NA NA NA NA NA NA NA NA ## 8 Angola 27.0 27.0 27.0 27.0 27.0 27.0 27.0 27.0 ## 9 Anguilla NA NA NA NA NA NA NA NA ## 10 Antigua and Bar… 33.5 33.5 33.5 33.5 33.5 33.5 33.5 33.5 ## # … with 250 more rows, and 209 more variables: `1808` &lt;dbl&gt;, ## # `1809` &lt;dbl&gt;, `1810` &lt;dbl&gt;, `1811` &lt;dbl&gt;, `1812` &lt;dbl&gt;, `1813` &lt;dbl&gt;, ## # `1814` &lt;dbl&gt;, `1815` &lt;dbl&gt;, `1816` &lt;dbl&gt;, `1817` &lt;dbl&gt;, `1818` &lt;dbl&gt;, ## # `1819` &lt;dbl&gt;, `1820` &lt;dbl&gt;, `1821` &lt;dbl&gt;, `1822` &lt;dbl&gt;, `1823` &lt;dbl&gt;, ## # `1824` &lt;dbl&gt;, `1825` &lt;dbl&gt;, `1826` &lt;dbl&gt;, `1827` &lt;dbl&gt;, `1828` &lt;dbl&gt;, ## # `1829` &lt;dbl&gt;, `1830` &lt;dbl&gt;, `1831` &lt;dbl&gt;, `1832` &lt;dbl&gt;, `1833` &lt;dbl&gt;, ## # `1834` &lt;dbl&gt;, `1835` &lt;dbl&gt;, `1836` &lt;dbl&gt;, `1837` &lt;dbl&gt;, `1838` &lt;dbl&gt;, ## # `1839` &lt;dbl&gt;, `1840` &lt;dbl&gt;, `1841` &lt;dbl&gt;, `1842` &lt;dbl&gt;, `1843` &lt;dbl&gt;, ## # `1844` &lt;dbl&gt;, `1845` &lt;dbl&gt;, `1846` &lt;dbl&gt;, `1847` &lt;dbl&gt;, `1848` &lt;dbl&gt;, ## # `1849` &lt;dbl&gt;, `1850` &lt;dbl&gt;, `1851` &lt;dbl&gt;, `1852` &lt;dbl&gt;, `1853` &lt;dbl&gt;, ## # `1854` &lt;dbl&gt;, `1855` &lt;dbl&gt;, `1856` &lt;dbl&gt;, `1857` &lt;dbl&gt;, `1858` &lt;dbl&gt;, ## # `1859` &lt;dbl&gt;, `1860` &lt;dbl&gt;, `1861` &lt;dbl&gt;, `1862` &lt;dbl&gt;, `1863` &lt;dbl&gt;, ## # `1864` &lt;dbl&gt;, `1865` &lt;dbl&gt;, `1866` &lt;dbl&gt;, `1867` &lt;dbl&gt;, `1868` &lt;dbl&gt;, ## # `1869` &lt;dbl&gt;, `1870` &lt;dbl&gt;, `1871` &lt;dbl&gt;, `1872` &lt;dbl&gt;, `1873` &lt;dbl&gt;, ## # `1874` &lt;dbl&gt;, `1875` &lt;dbl&gt;, `1876` &lt;dbl&gt;, `1877` &lt;dbl&gt;, `1878` &lt;dbl&gt;, ## # `1879` &lt;dbl&gt;, `1880` &lt;dbl&gt;, `1881` &lt;dbl&gt;, `1882` &lt;dbl&gt;, `1883` &lt;dbl&gt;, ## # `1884` &lt;dbl&gt;, `1885` &lt;dbl&gt;, `1886` &lt;dbl&gt;, `1887` &lt;dbl&gt;, `1888` &lt;dbl&gt;, ## # `1889` &lt;dbl&gt;, `1890` &lt;dbl&gt;, `1891` &lt;dbl&gt;, `1892` &lt;dbl&gt;, `1893` &lt;dbl&gt;, ## # `1894` &lt;dbl&gt;, `1895` &lt;dbl&gt;, `1896` &lt;dbl&gt;, `1897` &lt;dbl&gt;, `1898` &lt;dbl&gt;, ## # `1899` &lt;dbl&gt;, `1900` &lt;dbl&gt;, `1901` &lt;dbl&gt;, `1902` &lt;dbl&gt;, `1903` &lt;dbl&gt;, ## # `1904` &lt;dbl&gt;, `1905` &lt;dbl&gt;, `1906` &lt;dbl&gt;, `1907` &lt;dbl&gt;, … We want to gather the columns data %&gt;% gather(key, value, columns_to_gather) gapminder_untidy %&gt;% gather(key = year, value = life_expectancy, -`Life expectancy`) %&gt;% rename(land = `Life expectancy`) %&gt;% mutate(life_expectancy = as.numeric(life_expectancy)) ## # A tibble: 56,420 x 3 ## land year life_expectancy ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Abkhazia 1800 NA ## 2 Afghanistan 1800 28.2 ## 3 Akrotiri and Dhekelia 1800 NA ## 4 Albania 1800 35.4 ## 5 Algeria 1800 28.8 ## 6 American Samoa 1800 NA ## 7 Andorra 1800 NA ## 8 Angola 1800 27.0 ## 9 Anguilla 1800 NA ## 10 Antigua and Barbuda 1800 33.5 ## # … with 56,410 more rows spread() does the opposite. 4.22 Excercise 10 In your data set you have 12 columns for data volume consumption per month, tr_tot_data_vol_all_netw_1:tr_tot_data_vol_all_netw_12 Every column represent a month and you want to calculate the mean of data volume consumption over time. The columns represent a month The first column tr_tot_data_vol_all_netw_1 is the latest month, i.e. “2019-04-30” Create a vector with all the month dates corresponding to the columns. R function called seq() new_cols &lt;- seq(from = as.Date(&quot;2018-05-30&quot;), by = &quot;month&quot;, length.out = 12) %&gt;% as.character() new_cols ## [1] &quot;2018-05-30&quot; &quot;2018-06-30&quot; &quot;2018-07-30&quot; &quot;2018-08-30&quot; &quot;2018-09-30&quot; ## [6] &quot;2018-10-30&quot; &quot;2018-11-30&quot; &quot;2018-12-30&quot; &quot;2019-01-30&quot; &quot;2019-03-02&quot; ## [11] &quot;2019-03-30&quot; &quot;2019-04-30&quot; Rename every column by it’s date. kunder %&gt;% select(cust_id, source_date, pc_priceplan_nm, tr_tot_data_vol_all_netw_1:tr_tot_data_vol_all_netw_12) %&gt;% rename_at(vars(tr_tot_data_vol_all_netw_1:tr_tot_data_vol_all_netw_12), ~new_cols) Fill in the sort(decreasing = ) to TRUE Gather the data into two new columns called data_month and data_volume Turn data_month into a date-column new_cols &lt;- seq(from = as.Date(&quot;2018-05-30&quot;), by = &quot;month&quot;, length.out = 12) %&gt;% sort(decreasing = ) %&gt;% as.character() kunder_tidy_month &lt;- kunder %&gt;% select(cust_id, source_date, pc_priceplan_nm, tr_tot_data_vol_all_netw_1:tr_tot_data_vol_all_netw_12) %&gt;% rename_at(vars(tr_tot_data_vol_all_netw_1:tr_tot_data_vol_all_netw_12), ~new_cols) %&gt;% gather(... , ... , `2018-05-30`:`2019-04-30`) %&gt;% mutate(data_month = as.Date(data_month)) Calculate the mean value per priceplan and month mean_volume_sum &lt;- kunder_tidy_month %&gt;% group_by(pc_priceplan_nm, data_month) %&gt;% summarise(mean_volume = mean(data_volume, na.rm = T)) mean_volume_sum Execute the code to visualize: p &lt;- ggplot(mean_volume_sum, aes(x = data_month, y = mean_volume, color = pc_priceplan_nm)) + geom_line() + scale_color_discrete() + theme(legend.position = &quot;none&quot;) widget &lt;- plotly::ggplotly(p) htmlwidgets::saveWidget(widget, &quot;plotly_ex.html&quot;) &lt;iframe src=“plotly_ex.html” width = “900px”, height = “600px” frameBorder=“0”&gt; "],
["answers-to-excercises.html", "Chapter 5 Answers to excercises 5.1 Excercise 5.2 Excercise 5.3 Excercise 5.4 Excercise 1 5.5 Excercise 2 5.6 Excercise 3 5.7 Excercise 4 5.8 Excercise 5 5.9 Excercise 6 5.10 Excercise 7 5.11 Excercise 8 5.12 Excercise 9 5.13 Excercise 10 5.14 Extra", " Chapter 5 Answers to excercises 5.1 Excercise Press the knit button to compile this Rmarkdown-notebook to a HTML-document Change the author to your name, knit the document again 5.2 Excercise The package tidyverse is downloaded for you. Load it with library(). library(tidyverse) 5.3 Excercise Import the customer data tele2-kunder-sample.csv into R kunder &lt;- read_csv(&quot;data/tele2-kunder-sample.csv&quot;) ## Parsed with column specification: ## cols( ## .default = col_double(), ## source_date = col_date(format = &quot;&quot;), ## ar_key = col_character(), ## cust_id = col_character(), ## pc_l3_pd_spec_nm = col_character(), ## cpe_type = col_character(), ## cpe_net_type_cmpt = col_character(), ## pc_priceplan_nm = col_character(), ## sc_l5_sales_cnl = col_character(), ## rt_fst_cstatus_act_dt = col_date(format = &quot;&quot;), ## rrpu_amt_used = col_character(), ## rcm1pu_amt_used = col_character() ## ) ## See spec(...) for full column specifications. Use glimpse() on it glimpse(kunder) ## Observations: 300,000 ## Variables: 25 ## $ source_date &lt;date&gt; 2019-04-30, 2019-04-30, 2019-04-30,… ## $ ar_key &lt;chr&gt; &quot;AAEBfhzgf0riQnApBVflWOkmMXDU8iE=&quot;, … ## $ cust_id &lt;chr&gt; &quot;AAEBfv9gf7ePbf1Gdlo5/hEnEoU+SKw=&quot;, … ## $ pc_l3_pd_spec_nm &lt;chr&gt; &quot;MOBILE REGULAR&quot;, &quot;MOBILE REGULAR&quot;, … ## $ cpe_type &lt;chr&gt; NA, &quot;SMARTPHONE&quot;, &quot;SMARTPHONE&quot;, &quot;SMA… ## $ cpe_net_type_cmpt &lt;chr&gt; NA, &quot;4G&quot;, &quot;4G&quot;, &quot;4G&quot;, &quot;4G&quot;, &quot;4G&quot;, &quot;4… ## $ pc_priceplan_nm &lt;chr&gt; &quot;Kompis&quot;, &quot;Fast pris 20 GB&quot;, &quot;Fast p… ## $ sc_l5_sales_cnl &lt;chr&gt; &quot;RETAILER&quot;, &quot;RETAILER&quot;, &quot;RETAILER&quot;, … ## $ rt_fst_cstatus_act_dt &lt;date&gt; 2011-04-28, 2016-11-28, 2017-07-10,… ## $ tr_tot_data_vol_all_netw_1 &lt;dbl&gt; 0.0, 5252.1, 2844.1, 3404.9, 16003.9… ## $ tr_tot_data_vol_all_netw_2 &lt;dbl&gt; 0.0, 4257.8, 8479.6, 5576.5, 17052.2… ## $ tr_tot_data_vol_all_netw_3 &lt;dbl&gt; 0.0, 1718.6, 6746.2, 2670.8, 17990.2… ## $ tr_tot_data_vol_all_netw_4 &lt;dbl&gt; 0.0, 4716.0, 4620.3, 5493.7, 16964.0… ## $ tr_tot_data_vol_all_netw_5 &lt;dbl&gt; 0.0, 6252.0, 3374.7, 4393.4, 13623.4… ## $ tr_tot_data_vol_all_netw_6 &lt;dbl&gt; 0.0, 6136.5, 3142.3, 6417.5, 7598.6,… ## $ tr_tot_data_vol_all_netw_7 &lt;dbl&gt; 0.0, 4900.6, 3255.6, 5976.8, 10110.0… ## $ tr_tot_data_vol_all_netw_8 &lt;dbl&gt; 0.0, 1696.3, 7130.7, NA, 11497.0, 67… ## $ tr_tot_data_vol_all_netw_9 &lt;dbl&gt; NA, 3166.1, 8088.5, NA, 13318.2, 386… ## $ tr_tot_data_vol_all_netw_10 &lt;dbl&gt; 0.0, 6852.1, 10504.6, NA, 9623.9, 20… ## $ tr_tot_data_vol_all_netw_11 &lt;dbl&gt; 0.0, 5599.7, 6507.9, NA, 9259.9, 264… ## $ tr_tot_data_vol_all_netw_12 &lt;dbl&gt; 0.0, 2892.2, 4485.1, NA, 5254.3, 2.7… ## $ alloc_rrpu_amt &lt;dbl&gt; 39.20073, 841.34443, 339.25698, 283.… ## $ alloc_rcm1pu_amt &lt;dbl&gt; 39.20073, 824.74999, 239.95938, 253.… ## $ rrpu_amt_used &lt;chr&gt; &quot;Allocated RRPU&quot;, &quot;Allocated RRPU&quot;, … ## $ rcm1pu_amt_used &lt;chr&gt; &quot;Allocated RCM1PU&quot;, &quot;Allocated RCM1P… Try knitting the Rmarkdown again 5.4 Excercise 1 How many customers had a data-volume over 1000 in february 2019? filter(kunder, tr_tot_data_vol_all_netw_3 &gt; 1000) ## # A tibble: 198,235 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 2 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## # … with 198,225 more rows, and 19 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; How many customers have been “active” longer than 2005? filter(kunder, rt_fst_cstatus_act_dt &lt; &quot;2005-01-01&quot;) ## # A tibble: 15,837 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 2 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfk… MOBILE REGULAR FEATURE… 3G ## 6 2019-04-30 AAEBf… AAEBfu… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR MOBILE … &lt;NA&gt; ## 8 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR MOBILE … &lt;NA&gt; ## 10 2019-04-30 AAEBf… AAEBfu… MOBILE REGULAR SMARTPH… 4G ## # … with 15,827 more rows, and 19 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; How many customers have a data-volume over 2000 in february and have a calculated revenue larger than 500 per month? filter(kunder, tr_tot_data_vol_all_netw_3 &gt; 2000 &amp; alloc_rrpu_amt &gt; 500) ## # A tibble: 3,758 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 2 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfs… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfi… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfh… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBfh… MOBILE REGULAR SMARTPH… 4G ## # … with 3,748 more rows, and 19 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; How many customers have a priceplan with “Rörlig pris”? filter(kunder, pc_priceplan_nm == &quot;Rörligt&quot;) ## # A tibble: 0 x 25 ## # … with 25 variables: source_date &lt;date&gt;, ar_key &lt;chr&gt;, cust_id &lt;chr&gt;, ## # pc_l3_pd_spec_nm &lt;chr&gt;, cpe_type &lt;chr&gt;, cpe_net_type_cmpt &lt;chr&gt;, ## # pc_priceplan_nm &lt;chr&gt;, sc_l5_sales_cnl &lt;chr&gt;, ## # rt_fst_cstatus_act_dt &lt;date&gt;, tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, alloc_rrpu_amt &lt;dbl&gt;, ## # alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, rcm1pu_amt_used &lt;chr&gt; Are there any customers that are missing an ID? I.e. is NA. filter(kunder, is.na(cust_id)) ## # A tibble: 0 x 25 ## # … with 25 variables: source_date &lt;date&gt;, ar_key &lt;chr&gt;, cust_id &lt;chr&gt;, ## # pc_l3_pd_spec_nm &lt;chr&gt;, cpe_type &lt;chr&gt;, cpe_net_type_cmpt &lt;chr&gt;, ## # pc_priceplan_nm &lt;chr&gt;, sc_l5_sales_cnl &lt;chr&gt;, ## # rt_fst_cstatus_act_dt &lt;date&gt;, tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, alloc_rrpu_amt &lt;dbl&gt;, ## # alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, rcm1pu_amt_used &lt;chr&gt; Knit the document again 5.5 Excercise 2 How many customers have a subscription with “Fast pris”? filter(kunder, str_detect(pc_priceplan_nm, &quot;Fast pris&quot;)) ## # A tibble: 170,324 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 2 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfp… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR SMARTPH… 4G ## # … with 170,314 more rows, and 19 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; How many customers have a subscription that is not “Bredband”? filter(kunder, !str_detect(pc_priceplan_nm, &quot;Bredband&quot;)) ## # A tibble: 257,391 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## # … with 257,381 more rows, and 19 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; …dare I say… knit the document again? 5.6 Excercise 3 Which customer has been “active” longest? What is the date? arrange(kunder, rt_fst_cstatus_act_dt) ## # A tibble: 300,000 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR SMARTPH… 4G ## 2 2019-04-30 AAEBf… AAEBfn… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfk… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR MOBILE … 2G ## 6 2019-04-30 AAEBf… AAEBfl… MOBILE REGULAR MOBILE … 2.5G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfi… MOBILE REGULAR MOBILE … &lt;NA&gt; ## 9 2019-04-30 AAEBf… AAEBfs… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBfo… MOBILE REGULAR SMARTPH… 2.5G ## # … with 299,990 more rows, and 19 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; Which customer is most newly active? arrange(kunder, desc(rt_fst_cstatus_act_dt)) ## # A tibble: 300,000 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfu… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 3 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 4 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 6 2019-04-30 AAEBf… AAEBfl… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfi… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 8 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 9 2019-04-30 AAEBf… AAEBfp… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 10 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## # … with 299,990 more rows, and 19 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; 5.7 Excercise 4 Choose all columns that contain ”nm&quot; select(kunder, contains(&quot;nm&quot;)) ## # A tibble: 300,000 x 2 ## pc_l3_pd_spec_nm pc_priceplan_nm ## &lt;chr&gt; &lt;chr&gt; ## 1 MOBILE REGULAR Kompis ## 2 MOBILE REGULAR Fast pris 20 GB ## 3 MOBILE REGULAR Fast pris +EU 15 GB ## 4 MOBILE REGULAR Fast pris +EU 15 GB - 2018 ## 5 MOBILE REGULAR Fast pris ## 6 MOBILE REGULAR Fast pris +EU 5 GB ## 7 MOBILE REGULAR Rörligt pris ## 8 MOBILE REGULAR Fast pris +EU 1 GB ## 9 MOBILE REGULAR Fast pris ## 10 MOBILE REGULAR Fast pris ## # … with 299,990 more rows Choose the column for customer ID and all columns that starts with ”tr_tot&quot; select(kunder, cust_id, starts_with(&quot;tr_tot&quot;)) ## # A tibble: 300,000 x 13 ## cust_id tr_tot_data_vol… tr_tot_data_vol… tr_tot_data_vol… ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 AAEBfv… 0 0 0 ## 2 AAEBfr… 5252. 4258. 1719. ## 3 AAEBfm… 2844. 8480. 6746. ## 4 AAEBfm… 3405. 5576. 2671. ## 5 AAEBfr… 16004. 17052. 17990. ## 6 AAEBfg… 0.3 5.1 830. ## 7 AAEBfg… 0 0 0 ## 8 AAEBfq… 28.3 30.4 28.5 ## 9 AAEBfr… 6048. 6750 5277. ## 10 AAEBft… 3986. 3583. 2584. ## # … with 299,990 more rows, and 9 more variables: ## # tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_12 &lt;dbl&gt; Rename ”pc_priceplan_nm&quot; to ”price_plan&quot; rename(kunder, price_plan = pc_priceplan_nm) ## # A tibble: 300,000 x 25 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## # … with 299,990 more rows, and 19 more variables: price_plan &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt; 5.8 Excercise 5 Create a new variable that is the mean of the last 3 months of data consumption for all customers, save this to the data set kunder &lt;- mutate(kunder, mean_3_months = mean(tr_tot_data_vol_all_netw_1 + tr_tot_data_vol_all_netw_2 + tr_tot_data_vol_all_netw_3, na.rm = T)) Create a variable that takes the logarithm with base 10 (log10) of your previously created column mutate(kunder, log10_mean_3_months = log10(mean_3_months)) ## # A tibble: 300,000 x 27 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## # … with 299,990 more rows, and 21 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt;, mean_3_months &lt;dbl&gt;, log10_mean_3_months &lt;dbl&gt; Create a new variable that indicates if the priceplan is “Bredband” or not, save it to the data set kunder &lt;- mutate(kunder, bredband = if_else(str_detect(pc_priceplan_nm, &quot;Bredband&quot;), &quot;bredband&quot;, &quot;ej bredband&quot;)) Create a new variable that groups priceplan in “Fast pris”, “Rörligt pris”, “Bredband” and “Annan” for everything that is not in any of the previous. kunder &lt;- mutate(kunder, priceplan_cat = case_when( str_detect(tolower(pc_priceplan_nm), &quot;fast pris&quot;) ~ &quot;Fast pris&quot;, str_detect(tolower(pc_priceplan_nm), &quot;bredband&quot;) ~ &quot;Bredband&quot;, str_detect(tolower(pc_priceplan_nm), &quot;rörligt pris&quot;) ~ &quot;Rörlig pris&quot;, TRUE ~ &quot;Annan&quot; )) kunder %&gt;% group_by(priceplan_cat) %&gt;% count() ## # A tibble: 4 x 2 ## # Groups: priceplan_cat [4] ## priceplan_cat n ## &lt;chr&gt; &lt;int&gt; ## 1 Annan 74795 ## 2 Bredband 42608 ## 3 Fast pris 170324 ## 4 Rörlig pris 12273 5.9 Excercise 6 Create a varible for month lubridate::month(x) of customer activation mutate(kunder, month = lubridate::month(rt_fst_cstatus_act_dt)) ## # A tibble: 300,000 x 29 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## # … with 299,990 more rows, and 23 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt;, mean_3_months &lt;dbl&gt;, bredband &lt;chr&gt;, ## # priceplan_cat &lt;chr&gt;, month &lt;dbl&gt; Create a new varibale for year of customer activation mutate(kunder, year = lubridate::year(rt_fst_cstatus_act_dt)) ## # A tibble: 300,000 x 29 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## # … with 299,990 more rows, and 23 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt;, mean_3_months &lt;dbl&gt;, bredband &lt;chr&gt;, ## # priceplan_cat &lt;chr&gt;, year &lt;dbl&gt; Create a new variable with the number of days in the month of activation mutate(kunder, days_in_month = lubridate::days_in_month(rt_fst_cstatus_act_dt)) ## # A tibble: 300,000 x 29 ## source_date ar_key cust_id pc_l3_pd_spec_nm cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## # … with 299,990 more rows, and 23 more variables: pc_priceplan_nm &lt;chr&gt;, ## # sc_l5_sales_cnl &lt;chr&gt;, rt_fst_cstatus_act_dt &lt;date&gt;, ## # tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, ## # alloc_rrpu_amt &lt;dbl&gt;, alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, ## # rcm1pu_amt_used &lt;chr&gt;, mean_3_months &lt;dbl&gt;, bredband &lt;chr&gt;, ## # priceplan_cat &lt;chr&gt;, days_in_month &lt;int&gt; 5.10 Excercise 7 What is the sum data volume during the last month? What’s the mean and median and what are the max and min values? You can use max() and min() to calculate maximum and minimum-values. summarise(kunder, sum_data_vol = sum(tr_tot_data_vol_all_netw_1, na.rm = T), mean_data_vol = mean(tr_tot_data_vol_all_netw_1, na.rm = T), median_data_vol = median(tr_tot_data_vol_all_netw_1, na.rm = T), min_data_vol = min(tr_tot_data_vol_all_netw_1, na.rm = T), max_data_vol = max(tr_tot_data_vol_all_netw_1, na.rm = T)) ## # A tibble: 1 x 5 ## sum_data_vol mean_data_vol median_data_vol min_data_vol max_data_vol ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 5522899512. 19133. 4174 0 1674204. 5.11 Excercise 8 Use %&gt;% and answer the following questions: Which CPE type is most common? kunder %&gt;% group_by(cpe_type) %&gt;% count(sort = TRUE) ## # A tibble: 21 x 2 ## # Groups: cpe_type [21] ## cpe_type n ## &lt;chr&gt; &lt;int&gt; ## 1 SMARTPHONE 236839 ## 2 WLAN ROUTER 18637 ## 3 MODEM 16859 ## 4 MOBILE PHONE/FEATURE PHONE 10763 ## 5 &lt;NA&gt; 6014 ## 6 TABLET 5396 ## 7 FEATURE PHONE 2313 ## 8 ROUTER 1041 ## 9 USB MODEM 1016 ## 10 DONGLE 802 ## # … with 11 more rows Which priceplan has the highest mean data volume (for febraury 2019)? kunder %&gt;% group_by(pc_priceplan_nm) %&gt;% summarise(mean_data_vol = mean(tr_tot_data_vol_all_netw_1, na.rm = T)) %&gt;% arrange(desc(mean_data_vol)) ## # A tibble: 137 x 2 ## pc_priceplan_nm mean_data_vol ## &lt;chr&gt; &lt;dbl&gt; ## 1 Bredband 4G Only 400 GB - 2018 181130. ## 2 Bredband 4G Only 400 GB - 2019 168404. ## 3 Unlimited 140013. ## 4 Mobilt Bredband 4GL Obegränsad 125286. ## 5 Bredband 4G 200 GB 115727. ## 6 Fast pris 200 GB 110948. ## 7 Bredband 4G Only 200 GB 93155. ## 8 Bredband 4G Only 200 GB - 2018 92934. ## 9 Unlimited - 2018 70179. ## 10 Bredband 4G Only 100 GB - 2019 65644. ## # … with 127 more rows Calculate the mean of data volume for the year that the customer was created. Which year has the highest mean? kunder %&gt;% mutate(year = lubridate::year(rt_fst_cstatus_act_dt)) %&gt;% group_by(year) %&gt;% summarise(mean_data_vol = mean(tr_tot_data_vol_all_netw_1, na.rm = T)) %&gt;% arrange(desc(mean_data_vol)) ## # A tibble: 28 x 2 ## year mean_data_vol ## &lt;dbl&gt; &lt;dbl&gt; ## 1 2017 37434. ## 2 2018 32874. ## 3 2019 25331. ## 4 2016 21831. ## 5 2013 20337. ## 6 2015 19447. ## 7 2014 16353. ## 8 2012 14911. ## 9 2011 12822. ## 10 NA 11904. ## # … with 18 more rows 5.12 Excercise 9 Join you data with tele2-transactions.csv by cust_id. transactions &lt;- read_csv(&quot;data/tele2-transactions.csv&quot;) ## Parsed with column specification: ## cols( ## su_contract_dt = col_date(format = &quot;&quot;), ## ar_key = col_character(), ## cust_id = col_character(), ## false_gi = col_double(), ## increasednosub = col_double(), ## pc_l3_pd_spec_nm = col_character(), ## cust_tp = col_character(), ## sc_l5_sales_cnl = col_character(), ## pc_priceplan_nm = col_character(), ## bas_buck_size = col_character(), ## rrpu = col_double() ## ) left_join(kunder, transactions, by = c(&quot;cust_id&quot;, &quot;ar_key&quot;)) ## # A tibble: 300,000 x 37 ## source_date ar_key cust_id pc_l3_pd_spec_n… cpe_type cpe_net_type_cm… ## &lt;date&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 2019-04-30 AAEBf… AAEBfv… MOBILE REGULAR &lt;NA&gt; &lt;NA&gt; ## 2 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 3 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 4 2019-04-30 AAEBf… AAEBfm… MOBILE REGULAR SMARTPH… 4G ## 5 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 6 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 7 2019-04-30 AAEBf… AAEBfg… MOBILE REGULAR SMARTPH… 4G ## 8 2019-04-30 AAEBf… AAEBfq… MOBILE REGULAR SMARTPH… 4G ## 9 2019-04-30 AAEBf… AAEBfr… MOBILE REGULAR SMARTPH… 4G ## 10 2019-04-30 AAEBf… AAEBft… MOBILE REGULAR SMARTPH… 4G ## # … with 299,990 more rows, and 31 more variables: ## # pc_priceplan_nm.x &lt;chr&gt;, sc_l5_sales_cnl.x &lt;chr&gt;, ## # rt_fst_cstatus_act_dt &lt;date&gt;, tr_tot_data_vol_all_netw_1 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_2 &lt;dbl&gt;, tr_tot_data_vol_all_netw_3 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_4 &lt;dbl&gt;, tr_tot_data_vol_all_netw_5 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_6 &lt;dbl&gt;, tr_tot_data_vol_all_netw_7 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_8 &lt;dbl&gt;, tr_tot_data_vol_all_netw_9 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_10 &lt;dbl&gt;, tr_tot_data_vol_all_netw_11 &lt;dbl&gt;, ## # tr_tot_data_vol_all_netw_12 &lt;dbl&gt;, alloc_rrpu_amt &lt;dbl&gt;, ## # alloc_rcm1pu_amt &lt;dbl&gt;, rrpu_amt_used &lt;chr&gt;, rcm1pu_amt_used &lt;chr&gt;, ## # mean_3_months &lt;dbl&gt;, bredband &lt;chr&gt;, priceplan_cat &lt;chr&gt;, ## # su_contract_dt &lt;date&gt;, false_gi &lt;dbl&gt;, increasednosub &lt;dbl&gt;, ## # pc_l3_pd_spec_nm.y &lt;chr&gt;, cust_tp &lt;chr&gt;, sc_l5_sales_cnl.y &lt;chr&gt;, ## # pc_priceplan_nm.y &lt;chr&gt;, bas_buck_size &lt;chr&gt;, rrpu &lt;dbl&gt; 5.13 Excercise 10 In your data set you have 12 columns for data volume consumption per month. You want to calculate the difference of these and therefore have to gather these columns. Fill in the blank spaces to: Gather the columns Save it to a new data.frame, for example kunder_tidy_month Change eval=FALSE to eval=TRUE before knitting new_cols &lt;- seq(from = as.Date(&quot;2018-05-30&quot;), by = &quot;month&quot;, length.out = 12) %&gt;% sort(decreasing = ) %&gt;% as.character() kunder_tidy_month &lt;- kunder %&gt;% select(cust_id, source_date, priceplan_cat, tr_tot_data_vol_all_netw_1:tr_tot_data_vol_all_netw_12) %&gt;% rename_at(vars(tr_tot_data_vol_all_netw_1:tr_tot_data_vol_all_netw_12), ~new_cols) %&gt;% gather(data_month, data_volume, `2018-05-30`:`2019-04-30`) %&gt;% mutate(data_month = as.Date(data_month)) 5.14 Extra Run this visualization, set eval=TRUE in the chunk option before knitting. kunder_tidy_month %&gt;% group_by(priceplan_cat, data_month) %&gt;% summarise(mean_volume = mean(data_volume, na.rm = T)) %&gt;% ggplot(aes(x = data_month, y = mean_volume)) + geom_line() + scale_color_discrete() + facet_grid(rows = vars(priceplan_cat), scales = &quot;free&quot;) "],
["module-2-visualization.html", "Chapter 6 Module 2 - Visualization", " Chapter 6 Module 2 - Visualization More to come… "],
["advanced-data-manipulation.html", "Chapter 7 Advanced data manipulation", " Chapter 7 Advanced data manipulation More to come.. "],
["machine-learning-with-sparklyr.html", "Chapter 8 Machine learning with sparklyr", " Chapter 8 Machine learning with sparklyr More to come… "],
["references.html", "References", " References "]
]
